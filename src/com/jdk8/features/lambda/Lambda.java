package com.jdk8.features.lambda;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Flow.Publisher;

/**
 * Lambda 表达式是 java8 中最重要的新特性之一，是基于函数式编程思想引入的一种新的语法。支持将代码作为方法参数进行使用，可以使代码变得更加简洁紧凑。，可以将 Lambda 表达式理解为是一种匿名内部类的语法糖。
 * Lambda 本事没有名称，而且不像方法那样属于某一个类，但是可以有参数列表、代码体、返回值。使用 Lambda 表达式之后就不需要在编写匿名类
 * Lambda 表达式的语法格式如下：
 * (参数列表) -> {代码体}
 * 1. 参数列表：指定方法中的参数列表，参数列表可以省略参数类型，如果参数列表中只有一个参数，那么参数列表的小括号可以省略
 * 2. ->：指定了参数列表和代码体的分隔符号
 * 3. 代码体：指定了 Lambda 表达式要执行的功能，代码体可以是一条语句，也可以是多条语句，如果代码体只有一条语句，那么代码体的大括号可以省略，如果代码体中有 return 语句，那么 return 语句必须省略
 * <p>
 */
public class Lambda {

  /**
   * Lambda表达式在执行的时候，会调用
   * LambdaMetafactory.metafactory动态的生成内部类，在方
   * 法内调用 SourceDemo$&Lambda$1 ，内部类里的调用方法块
   * 并不是动态生成的，只是在原class里已经编译生成了一个静
   * 态的方法，内部类只需要调用该静态方法。
   */
  public void  demo(){
    String[] languages = {"Java", "Python", "C++", "PHP", "JavaScript", "C#", "Go", "Swift", "Kotlin", "Rust"};

    List<String> langList = Arrays.asList(languages);
   langList.forEach(System.out::println);
  }

  public static void main(String[] args) {
    // 1. 无参数，无返回值
    // 1.1 无参数，只有一条语句
    // 1.1.1 代码体中只有一条语句，代码体的大括号可以省略
    // 1.1.2 代码体中只有一条语句，代码体中的 return 语句可以省略
    // 1.1.3 代码体中只有一条语句，代码体中的 return 语句可以省略，代码体的大括号可以省略
    // 1.2 无参数，有多条语句
    // 1.2.1 代码体中有多条语句，代码体的大括号不能省略
    // 1.2.2 代码体中有多条语句，代码体中的 return 语句不能省略
    // 1.2.3 代码体中有多条语句，代码体中的 return 语句不能省略，代码体的大括号不能省略
    // 2. 有参数，无返回值
    // 2.1 有参数，只有一条语句
    // 2.1.1 参数列表中只有一个参数，参数列表的小括号可以省略
    // 2.1.2 代码体中只有一条语句，代码体的大括号可以省略
    // 2.1.3 代码体中只有一条语句，代码体中的 return 语句可以省略
    // 2.1.4 代码体中只有一条语句，代码体中的 return 语句可以省略，代码体的大括号可以省略
    // 2.2 有参数，有多条语句
    // 2.2.1 参数列表中只有一个参数，参数列表的小括号可以省略
    // 2.2.2 代码体中有多条语句，代码体的大括号不能省略
    // 2.2.3 代码体中有多条语句，代码体中的 return 语句不能省略
    // 2.2.4 代码体中有多条语句，代码体中的 return 语句不能省略，代码体的大括号不能省略
    // 2.3 有参数，有返回值
    // 2.3.1 参数列表中只有一个参数，参数列表的小括号可以省略
    // 2.3.2 代码体中只有一条语句，代码体的大括号不能省略
    // 2.3.3 代码体中只有一条语句，代码体中的 return 语句不能省略
    // 2.3.4 代码体中只有一条语句，代码体中的 return 语句不能省
  }

}
